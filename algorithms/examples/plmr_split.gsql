USE GRAPH social
DROP QUERY plmr_split

CREATE BATCH QUERY plmr_split(INT iter1 = 32, INT iter2 = 32, INT iter3 = 0, INT split = 10, int output_mode = 0, int debug = 2, int skewLimit = 10000, STRING fileResult = "/tmp/community.csv") for graph social {
  /*
 * Parallel Louvain Method with Refinement
 * https://arxiv.org/pdf/1304.4453
 * iter: There are three phases in the algorithm -- move, merge and refine. Their max number of iterations are set by iter1, iter2, iter3 respectively.
 * split: To save memory, split number is 10 by default.  
 * output_mode: 0, PRINT JSON; 1, write to graph attribute; 2, write to file (fastest)
 * debug: 0, no modularity info; 1, show debug log; 2, modularity for each interation  
 */

        MapAccum<INT, MapAccum<INT, SumAccum<float>>> @@neigh_weightMap;  // To record edges between communities
        MapAccum<INT, SumAccum<FLOAT>> @@dc;
        MapAccum<INT, SumAccum<FLOAT>> @@lc;
        MapAccum<INT, SetAccum<FLOAT>> @@cidMap;
        MinAccum<INT> @cid;     // Community ID
        MinAccum<INT> @uid;     // Unique internal ID for each vertex
        MinAccum<INT> @ccid;    // Community Community ID
        SumAccum<FLOAT> @weight;  // Total weight of all edges that a vertex was linked
        OrAccum @nothub = False;
        SumAccum<FLOAT> @@total_weight;    // Total weight of all edges in the graph
        MapAccum<INT, SumAccum<FLOAT>> @@tot;    // Sum of the weights of the links incident to nodes in a community C
        MapAccum<INT, SetAccum<INT>> @@sameComm;
        MapAccum<INT, SetAccum<INT>> @@moveComm;
        MapAccum<INT, SumAccum<FLOAT>> @neigh_weight;   // Total weight of a node's neighbors which belongs to a community.
        BOOL improved = True;
        SumAccum<INT> @@iterations = 0;
        SumAccum<INT> @@loop = 0;
        SumAccum<FLOAT> @@res = 0;
        FLOAT modularity = 0;
        FLOAT max_modularity = 0;
        FLOAT last_modularity = 0;
        FLOAT epsilon = 0.00001;  // Diff of modularity
        SumAccum<FLOAT> @@modularity;

        FILE f (fileResult);

  /*
   * Assign a different community to each node of the network.
   */
        Start = {Person.*};
        Start = SELECT s FROM Start:s
                WHERE s.outdegree() < skewLimit
                POST-ACCUM s.@uid = getvid(s), 
                           s.@cid = s.@uid, 
                           s.@nothub += True;
        log(debug > 0, "[redrain] started.");

        S = SELECT s
            FROM Start:s -(:e)- Person:t
            WHERE t.@nothub == True
            ACCUM @@total_weight += e.weight, 
                  s.@weight += e.weight;

        Start = SELECT s
                FROM Start:s
                ACCUM CASE WHEN NOT @@tot.containsKey(s.@cid) THEN
                              @@tot += (s.@cid -> s.@weight)
                      END;

        log(debug > 0, "[redrain] starting Phase #1", iter1);

        @@loop = 0;
        WHILE (@@loop < split) DO
                T1 = SELECT s
                     FROM Start:s -(:e)- Person:t
                     WHERE s.@uid % split == @@loop
                     ACCUM s.@neigh_weight += (t.@cid -> e.weight)     // @neigh_weight is a map on each vertex
                     POST-ACCUM
                           FLOAT best_gain = 0.0,
                           FLOAT modularity_gain = 0.0,
                           INT best_comm = s.@cid,
                           FLOAT new_weight = @@tot.get(s.@cid) - s.@weight,
                           FOREACH (k, v) IN s.@neigh_weight DO
                                   CASE WHEN k == s.@cid THEN       // vertex can be in same community
                                           modularity_gain = v - (new_weight * s.@weight / @@total_weight)
                                   ELSE
                                           modularity_gain = v - (@@tot.get(k) * s.@weight / @@total_weight)
                                   END,
                                   CASE WHEN (modularity_gain > best_gain) THEN
                                           best_comm = k,    // the community with max delta
                                           best_gain = modularity_gain    //max delta
                                   END
                           END,
                           CASE WHEN best_comm != s.@cid THEN
                                   @@sameComm += (s.@cid -> best_comm)   // record the tentative move to prevent 0-->1, 1-->0
                           END,
                           s.@neigh_weight.clear();
                @@loop += 1;
        END;

  // To prevent movement like this: 0 --> 1, 1 --> 0
        T1 = SELECT s
             FROM Start:s -(:e)- Person:t
             WHERE @@sameComm.containsKey(s.@cid)
             POST-ACCUM INT new_cid = 0,
                        FOREACH v in @@sameComm.get(s.@cid) DO
                                new_cid = v
                        END,
                        BOOL need_to_move = False,
                        CASE WHEN not @@sameComm.containsKey(new_cid) THEN
                                need_to_move = True
                        ELSE
                                INT turnaround = 0,
                                FOREACH v in @@sameComm.get(new_cid) DO
                                        turnaround = v
                                END,
                                CASE WHEN turnaround != s.@cid or new_cid < s.@cid THEN
                                        need_to_move = True
                                END
                        END,
                        CASE WHEN need_to_move THEN
                                @@tot += (s.@cid -> (-1 * s.@weight)),
                                @@tot += (new_cid -> s.@weight),
                                s.@cid = new_cid,
                                improved = True
                        END;
        @@sameComm.clear();
  
  /*
   * Phase #1: Merge nodes
   * For each node i we consider the neighbours j of i
   * and we evaluate the gain of modularity that would
   * take place by removing i FROM its community and
   * by placing it in the community of j.
   * The node i is then placed in the community for which
   * this gain is maximum, but only if this gain is positive.
   * If no positive gain is possible, i stays in its original community.
   */
        improved = True;
        WHILE (improved) LIMIT iter1 DO
                improved = False;
                @@iterations += 1;
                @@loop = 0;
                WHILE (@@loop < split) DO
                        T1 = SELECT s
                             FROM Start:s -(:e)- Person:t
                             WHERE s.@uid % split == @@loop
                             ACCUM s.@neigh_weight += (t.@cid -> e.weight)
                             POST-ACCUM FLOAT best_gain = 0.0,
                                        FLOAT modularity_gain = 0.0,
                                        INT best_comm = s.@cid,
                                        FLOAT new_weight = @@tot.get(s.@cid) - s.@weight,
                                        FOREACH (k, v) IN s.@neigh_weight DO
                                                CASE WHEN k == s.@cid THEN
                                                        modularity_gain = v - (new_weight * s.@weight / @@total_weight)
                                                ELSE
                                                        modularity_gain = v - (@@tot.get(k) * s.@weight / @@total_weight)
                                                END,
                                                CASE WHEN (modularity_gain > best_gain) THEN
                                                        best_comm = k,
                                                        best_gain = modularity_gain
                                                END
                                        END,
                                        CASE WHEN best_comm != s.@cid THEN
                                                @@tot += (s.@cid -> (-1 * s.@weight)),
                                                @@tot += (best_comm -> s.@weight),
                                                s.@cid = best_comm,
                                                improved = True
                                        END,
                                        s.@neigh_weight.clear();
                        @@loop += 1;
                END;
  
                CASE WHEN debug < 2 THEN
                        log(debug > 0, "[redrain] Phase #1", @@iterations);
                        Continue;
                END;

    // calculate modularity
                @@res = 0;
                S = SELECT s 
                    FROM Start:s-(:e)-Person:t
                    WHERE t.@nothub == True
                    ACCUM @@dc += (s.@cid -> e.weight),
                          CASE WHEN s.@cid == t.@cid THEN
                                  @@lc += (s.@cid -> e.weight)
                          END
                    POST-ACCUM FLOAT dc = @@dc.get(s.@cid),
                          @@cidMap += (s.@cid -> (@@lc.get(s.@cid) - dc * dc * 1.0 / @@total_weight));
  
                FOREACH (k, vs) IN @@cidMap DO
                        FOREACH v IN vs DO
                                @@res += v;
                        END;
                END;
                modularity = @@res * 1.0 / @@total_weight;
                               
                log(debug > 0, "[redrain]#1", @@iterations, @@cidMap.size(), modularity);
                PRINT @@iterations AS Phase1Iter, @@cidMap.size() AS NumberOfCommunity, modularity;
                @@dc.clear();
                @@lc.clear();
                @@cidMap.clear();
                CASE WHEN modularity < last_modularity THEN
                        improved = False;
                END;
                last_modularity = modularity;
                CASE WHEN abs(modularity - max_modularity) < epsilon THEN
                        improved = False;
                END;
                CASE WHEN modularity > max_modularity THEN
                        max_modularity = modularity;
                END;
        END; // WHILE (improved)

        log(debug > 0, "[redrain] finished Phase #1", @@iterations);
        PRINT @@iterations AS IterationsInPhase_1;

  /*
   * Phase #2: Merge communities
   */
        @@iterations = 0;
        improved = True;
        WHILE (improved) LIMIT iter2 DO
                improved = False;
                AllComm = SELECT s
                          FROM Start:s -(:e)- Person:t
                          WHERE @@tot.containsKey(s.@uid) and @@tot.get(s.@uid) > 0
                          POST-ACCUM s.@ccid = s.@uid,
                                     s.@weight = @@tot.get(s.@uid);

                log(debug > 0, "[redrain]#2", AllComm.size());
                @@neigh_weightMap.clear();
                S = SELECT s
                    FROM Start:s -(:e)- Person:t
                    WHERE s.@uid < t.@uid AND s.@cid != t.@cid AND @@tot.get(s.@cid) > 0 AND @@tot.get(t.@cid) > 0
                    ACCUM @@neigh_weightMap += (s.@cid -> (t.@cid -> e.weight)),
                          @@neigh_weightMap += (t.@cid -> (s.@cid -> e.weight));

                log(debug > 0, "[redrain]#2", @@neigh_weightMap.size());
                @@iterations += 1;
                C2 = SELECT s
                     FROM AllComm:s
                     POST-ACCUM FLOAT best_gain = 0.0,
                                FLOAT modularity_gain = 0.0,
                                INT best_comm = s.@ccid,
                                FLOAT new_weight = @@tot.get(s.@ccid) - s.@weight,
                                FOREACH (k, v) IN @@neigh_weightMap.get(s.@ccid) DO
                                        CASE WHEN k == s.@ccid THEN
                                                modularity_gain = v - (new_weight * s.@weight / @@total_weight)
                                        ELSE
                                                modularity_gain = v - (@@tot.get(k) * s.@weight / @@total_weight)
                                        END,
                                        CASE WHEN (modularity_gain > best_gain) THEN
                                                best_comm = k,
                                                best_gain = modularity_gain
                                        END
                                END,
                                CASE WHEN best_comm != s.@ccid THEN
                                        @@sameComm += (s.@ccid -> best_comm)
                                END;

                log(debug > 0, "[redrain]#2:", @@sameComm.size());
                C2 = SELECT s
                     FROM AllComm:s
                     WHERE @@sameComm.containsKey(s.@ccid)
                     POST-ACCUM INT new_cid = 0,
                                FOREACH v in @@sameComm.get(s.@ccid) DO
                                        new_cid = v
                                END,
                                bool need_to_move = False,
                                CASE WHEN NOT @@sameComm.containsKey(new_cid) THEN
                                        need_to_move = True
                                ELSE
                                        int turnaround = 0,
                                        FOREACH v in @@sameComm.get(new_cid) DO
                                                turnaround = v
                                        END,
                                        CASE WHEN turnaround != s.@ccid or new_cid < s.@ccid THEN
                                                need_to_move = True
                                        END
                                END,
                                CASE WHEN need_to_move THEN
                                        @@tot += (s.@ccid -> (-1 * s.@weight)),
                                        @@tot += (new_cid -> s.@weight),
                                        @@moveComm += (s.@ccid -> new_cid),
                                        s.@ccid = new_cid,
                                        improved = True
                                END;

                @@sameComm.clear();
                log(debug > 0, "[redrain]#2:", @@moveComm.size());
                // move nodes
                T0 = SELECT s
                     FROM Start:s -(:e)- Person:t
                     WHERE @@moveComm.containsKey(s.@cid)
                     POST-ACCUM FOREACH v IN @@moveComm.get(s.@cid) DO
                                        s.@cid = v
                                END;
                @@moveComm.clear();

                CASE WHEN debug < 2 THEN
                        log(debug > 0, "[redrain] Phase #2", @@iterations);
                        Continue;
                END;

    // calculate modularity
                @@res = 0;
                S = SELECT s 
                    FROM Start:s-(:e)-Person:t
                    WHERE t.@nothub == True
                    ACCUM @@dc += (s.@cid -> e.weight),
                          CASE WHEN s.@cid == t.@cid THEN
                                @@lc += (s.@cid -> e.weight)
                          END
                    POST-ACCUM FLOAT dc = @@dc.get(s.@cid),
                               @@cidMap += (s.@cid -> (@@lc.get(s.@cid) - dc * dc * 1.0 / @@total_weight));
  
                FOREACH (k, vs) IN @@cidMap DO
                        FOREACH v IN vs DO
                                @@res += v;
                        END;
                END;
                modularity = @@res * 1.0 / @@total_weight;
                log(debug > 0, "[redrain]#2", @@iterations, @@cidMap.size(), modularity);
                PRINT @@iterations AS Phase2Iter, @@cidMap.size() AS NumberOfCommunity, modularity;
                @@dc.clear();
                @@lc.clear();
                @@cidMap.clear();
                CASE WHEN modularity < last_modularity THEN
                        improved = False;
                END;
                last_modularity = modularity;
                CASE WHEN abs(modularity - max_modularity) < epsilon THEN
                        improved = False;
                END;
                CASE WHEN modularity > max_modularity THEN
                        max_modularity = modularity;
                END;
        END; // WHILE (improved)
        PRINT @@iterations AS IterInPhase_2;

  /*
   * Phase #3: Refinement
   */
        improved = True;
        @@iterations = 0;
        WHILE (improved) LIMIT iter3 DO
                improved = False;
                @@iterations += 1;

                @@loop = 0;
                WHILE (@@loop < split) DO
                        T1 = SELECT s
                             FROM Start:s -(:e)- Person:t
                             WHERE s.@uid % split == @@loop
                             ACCUM s.@neigh_weight += (t.@cid -> e.weight)
                             POST-ACCUM FLOAT best_gain = 0.0,
                                        FLOAT modularity_gain = 0.0,
                                        INT best_comm = s.@cid,
                                        FLOAT new_weight = @@tot.get(s.@cid) - s.@weight,
                                        FOREACH (k, v) IN s.@neigh_weight DO
                                                CASE WHEN k == s.@cid THEN
                                                        modularity_gain = v - (new_weight * s.@weight / @@total_weight)
                                                ELSE
                                                        modularity_gain = v - (@@tot.get(k) * s.@weight / @@total_weight)
                                                END,
                                                CASE WHEN (modularity_gain > best_gain) THEN
                                                        best_comm = k,
                                                        best_gain = modularity_gain
                                                END
                                        END,
                                        CASE WHEN best_comm != s.@cid THEN
                                                @@tot += (s.@cid -> (-1 * s.@weight)),
                                                @@tot += (best_comm -> s.@weight),
                                                s.@cid = best_comm,
                                                improved = True
                                        END,
                                        s.@neigh_weight.clear();
                        @@loop += 1;
                END;
  
                CASE WHEN debug < 2 THEN
                        log(debug > 0, "[redrain] Phase #3", @@iterations);
                        Continue;
                END;

    // calculate modularity
                @@res = 0;
                S = SELECT s 
                    FROM Start:s-(:e)-Person:t
                    WHERE t.@nothub == True
                    ACCUM @@dc += (s.@cid -> e.weight),
                          CASE WHEN s.@cid == t.@cid THEN
                                @@lc += (s.@cid -> e.weight)
                          END
                    POST-ACCUM FLOAT dc = @@dc.get(s.@cid),
                               @@cidMap += (s.@cid -> (@@lc.get(s.@cid) - dc * dc * 1.0 / @@total_weight));
  
                FOREACH (k, vs) IN @@cidMap DO
                        FOREACH v IN vs DO
                                @@res += v;
                        END;
                END;
                modularity = @@res * 1.0 / @@total_weight;
                log(debug > 0, "[redrain]#3", @@iterations, @@cidMap.size(), modularity);
                PRINT @@iterations AS Phase3Iter, @@cidMap.size() AS NumberOfCommunity, modularity;
                @@dc.clear();
                @@lc.clear();
                @@cidMap.clear();
                CASE WHEN modularity < last_modularity THEN
                        improved = False;
                END;
                last_modularity = modularity;
                CASE WHEN abs(modularity - max_modularity) < epsilon THEN
                        improved = False;
                END;
                CASE WHEN modularity > max_modularity THEN
                        max_modularity = modularity;
                END;
        END; // WHILE (improved)

        log(debug > 0, "[redrain] finished Phase #3", @@iterations);
        PRINT @@iterations AS IterationsInPhase_3;


    //output
        CASE WHEN output_mode == 0 THEN
                PRINT Start.@cid;
        END;

        CASE WHEN output_mode == 1 THEN
                S = SELECT s
                    FROM Start:s
                    POST-ACCUM s.cid = s.@cid;
        END;

        CASE WHEN output_mode == 2 then
                f.println("Vertex_ID", "community_id");
                S = SELECT s
                    FROM Start:s
                    POST-ACCUM f.println(s, s.@cid);
        END;
}

# install query plmr
# run query plmr(10, 10, 2)
