CREATE QUERY cosine_nbor_ss (VERTEX source, INT topK) FOR GRAPH movie {
/* This query calculates the Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute.
   A similarity edge with one FLOAT attribute in the schema is required for this version.
*/

        TYPEDEF tuple<VERTEX vertex1, VERTEX vertex2, FLOAT score> SIMILARITY_SCORE;

        HeapAccum<SIMILARITY_SCORE>(topK, score DESC) @@result_topK;    
        SumAccum<FLOAT> @numerator, @@norm1, @norm2;

        start1 = {source};
        subjects = SELECT t
                   FROM start1:s -(Likes:e)-> :t
                   ACCUM t.@numerator = e.weight,
                         @@norm1 += pow(e.weight, 2);

        neighbours = SELECT t
                     FROM subjects:s -(Reverse_Likes:e)-> Person:t
                     WHERE t != source
                     ACCUM t.@numerator += s.@numerator * e.weight;

        neighbours = SELECT s
                     FROM neighbours:s -(Likes:e)-> :t
                     ACCUM s.@norm2 += pow(e.weight, 2)
              	     POST-ACCUM @@result_topK += SIMILARITY_SCORE(source, s, s.@numerator/sqrt(@@norm1 * s.@norm2))
                     ;

        PRINT @@result_topK;


}

