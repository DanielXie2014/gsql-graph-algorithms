CREATE QUERY pageRank_wt (FLOAT max_change = 0.001, INT iter = 50, FLOAT damping = 0.85, BOOL display = FALSE, INT output_limit = 100, INT split=1) FOR GRAPH social{
# Compute the pageRank score for each vertex in the GRAPH, using weighted edge.
# In each iteration, compute a score for each vertex:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# The pageRank algorithm stops when either of the following is true:
#  a) it reaches maxIter iterations;
#  b) the max score change for any vertex compared to the last iteration <= maxChange.

        MaxAccum<FLOAT> @@max_diff = 9999; # max score change in an iteration
        SumAccum<FLOAT> @received_score = 0; # sum of scores each vertex receives FROM neighbors
        SumAccum<FLOAT> @score = 1;   # Initial score for every vertex is 1.
        SetAccum<EDGE> @@edge_set;                   # list of all edges, if display is needed
        SumAccum<FLOAT> @total_weight;

        all = {Person.*};   #  Start with all vertices of specified type(s)
        tmp = SELECT s
              FROM all:s -((Friend):e) -> :t
              ACCUM s.@total_weight += e.weight;  # Calculate the total weight for each vertex
             
        WHILE @@max_diff > max_change LIMIT iter DO
                @@max_diff = 0;
                FOREACH i IN RANGE[0, split-1] DO 
                        subset = SELECT s
                                 FROM all:s
                                 WHERE getvid(s) % split == i;
                        tmp = SELECT s
                              FROM subset:s -((Friend):e)-> :t
                              ACCUM t.@received_score += s.@score * e.weight / s.@total_weight; 
                END;
                all = SELECT s
                      FROM all:s
                      POST-ACCUM s.@score = (1.0-damping) + damping * s.@received_score,
                                 s.@received_score = 0,
                                 @@max_diff += abs(s.@score - s.@score');
        END;


        IF output_limit > 0 THEN
                top_scores = SELECT s FROM all:s
                             ORDER BY s.@score DESC
                             LIMIT output_limit;
                PRINT top_scores;
        END;
        IF display THEN
                PRINT all[all.@score];
                all = SELECT s
                        FROM all:s -((Friend):e)-> :t
                        ACCUM @@edge_set += e;
                PRINT @@edge_set;
        END;

}
