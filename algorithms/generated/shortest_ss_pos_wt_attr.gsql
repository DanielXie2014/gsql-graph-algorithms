# Algorithm for Single-Source Shortest Path with positive weights on edges 
# The path parameter let user choose whether calculate path or not

CREATE QUERY shortest_ss_pos_wt_attr (VERTEX v, BOOL display, BOOL path) FOR GRAPH social {


	MinAccum<float> @dis;
        OrAccum @visited;
	ListAccum<vertex> @path;
        SetAccum<edge> @@edgeSet;
	float epsilon = 0.000000001;

        VSET = {Person.*};
        Source = {v};
        Source = SELECT s FROM Source:s 
		 ACCUM s.@visited += true, s.@dis = 0;  //initialize

        while(Source.size()>0) do
          Source = SELECT t
                   FROM Source:s -(Coworker:e)-> :t
                   WHERE t.@dis > s.@dis + e.weight
                   ACCUM t.@dis += s.@dis + e.weight,
                         t.@visited += true;
        end;

        VSET = SELECT s FROM VSET:s
               WHERE s.@visited == true;

  ##### Print the results #####
IF path THEN
	Source = {v};
        while(Source.size()>0) do
          Source = SELECT t
                   FROM Source:s -(Coworker:e)-> :t
                   WHERE abs((t.@dis) - (s.@dis+e.weight)) < epsilon
                   ACCUM t.@path = s.@path + [t];
        end;

VSET = SELECT s
         FROM VSET:s
         POST-ACCUM s.score = s.@dis;  

                    
  IF display THEN
     PRINT VSET[VSET.@dis, VSET.@path];
     VSET = SELECT s
          FROM VSET:s -(Coworker:e)-> :t
         ACCUM @@edgeSet += e;
     PRINT @@edgeSet;
  END;


ELSE

VSET = SELECT s
       FROM VSET:s
       POST-ACCUM s.score = s.@dis;


  IF display THEN
     PRINT VSET[VSET.@dis];
     VSET = SELECT s
          FROM VSET:s -(Coworker:e)-> :t
         ACCUM @@edgeSet += e;
     PRINT @@edgeSet;
  END;


END;

}



