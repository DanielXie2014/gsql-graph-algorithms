
#ccard subquery
 CREATE QUERY similarity_cos_sub_file (vertex input) FOR GRAPH movie returns (MapAccum<vertex, float>){

  MapAccum<vertex, float> @@result;
        SumAccum<float> @numerator, @@norm1, @norm2;

        start1 = {input};
        subjects = select t
                   from start1:s -(Likes:e)-> :t
                   accum t.@numerator = 1,
                         @@norm1 += pow(1, 2);

        neighbours = select t
                     from subjects:s -(reverse_Likes:e)-> Person:t
		     where t != input and getvid(input) < getvid(t)
                     accum t.@numerator += s.@numerator * 1;

        neighbours = select s
                     from neighbours:s -(Likes:e)-> :t
                     accum s.@norm2 += pow(1, 2)
               post-accum @@result += (s -> s.@numerator/sqrt(@@norm1 * s.@norm2))
                 ;

  return @@result;
}

# main query
CREATE QUERY similarity_cos_file (int topk, STRING filepath) FOR GRAPH movie{

TYPEDEF tuple<vertex vertex1, vertex vertex2, float score> SIMILARITY_SCORE;
FILE f(filepath);
MapAccum<vertex, float> @single_result;
HeapAccum<SIMILARITY_SCORE>(topk, score DESC) @@total_result;

	start = {Person.*}; 
	start = select s
	        from start:s
          accum s.@single_result = similarity_cos_sub_file (s)
          post-accum
                  foreach (key, value) in s.@single_result do
                          @@total_result += SIMILARITY_SCORE(s, key, value)
                  end
		;
	
	f.println("Vertex1","Vertex2","Similarity");
  foreach item in @@total_result do
          f.println(item.vertex1, item.vertex2, item.score);
  end;

}

#install query similarity_cos_sub_file
#install query similarity_cos_file 
