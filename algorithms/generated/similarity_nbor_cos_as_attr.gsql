  CREATE QUERY similarity_nbor_cos_as_sub_attr (vertex<Person> input) FOR GRAPH movie {
/* This subquery calculates the Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
*/

        SumAccum<float> @numerator, @@norm1, @norm2;

        start1 = {input};
        subjects = SELECT t
                   FROM start1:s -(Likes:e)-> :t
                   ACCUM t.@numerator = e.weight,
                         @@norm1 += pow(e.weight, 2);

        neighbours = SELECT t
                     FROM subjects:s -(reverse_Likes:e)-> Person:t
                     WHERE t != input and getvid(input) < getvid(t)
                     ACCUM t.@numerator += s.@numerator * e.weight;

        neighbours = SELECT s
                     FROM neighbours:s -(Likes:e)-> :t
                     ACCUM s.@norm2 += pow(e.weight, 2)
                     POST-ACCUM insert into similarity values (input, s, s.@numerator/sqrt(@@norm1 * s.@norm2))
                 ;

}


CREATE QUERY similarity_nbor_cos_as_attr () FOR GRAPH movie { 
/* This query calls the subquery similarity_nbor_cos_as_sub_attr to get the similarity score of every pair of vertices.
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute.
   A similarity edge with one float attribute in the schema is required for this version.
*/

        start = {Person.*}; 
        start = SELECT s
                FROM start:s
                ACCUM similarity_nbor_cos_as_sub_attr (s)
            ;
        

}

#install query similarity_nbor_cos_as_sub_attr
#install query similarity_nbor_cos_as_attr 
