CREATE QUERY similarity_jaccard_sub (vertex input) FOR GRAPH movie RETURNS (MapAccum<vertex, float>){
/* This subquery calculates the Jaccard Similarity between a given vertex and every other vertex.
Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
*/
    
        MapAccum<vertex, float> @@result;
        SumAccum<int> @intersection_size, @@set_size_A, @set_size_B;

        Start (ANY) = {input};
        Start = SELECT s
                FROM Start:s
                ACCUM @@set_size_A += s.outdegree("Likes");

        Subjects = SELECT t
                   FROM Start:s-(Likes:e)-:t;

        Others = SELECT t
                 FROM Subjects:s -(reverse_Likes:e)- :t
                 WHERE t != input and getvid(input) < getvid(t)
                 ACCUM t.@intersection_size += 1, 
                       t.@set_size_B = t.outdegree("Likes")
                 POST-ACCUM @@result += (t -> t.@intersection_size*1.0/(@@set_size_A + t.@set_size_B - t.@intersection_size))
                 ;

        RETURN @@result;
}

CREATE QUERY similarity_jaccard (int topk) FOR GRAPH movie{

/* This query calls the subquery similarity_jaccard_sub to get the similarity score of every pair of vertices.
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute. 
   A similarity edge with one float attribute in the schema is required for this version.  
*/

        TYPEDEF tuple<vertex vertex1, vertex vertex2, float score> SIMILARITY_SCORE;
        MapAccum<vertex, float> @single_result;
        HeapAccum<SIMILARITY_SCORE>(topk, score DESC) @@total_result;

        start = {Person.*};
        start = SELECT s
                FROM start:s
                ACCUM s.@single_result = similarity_jaccard_sub (s)
                POST-ACCUM
                        FOREACH (key, value) IN s.@single_result DO
                                @@total_result += SIMILARITY_SCORE(s, key, value)
                        END
                ;

        PRINT @@total_result;

}

