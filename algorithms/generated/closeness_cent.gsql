# Closeness Centrality

# Subquery returns closeness centrality for vertex v in graph with numVert vertices
 CREATE QUERY cc_subquery (VERTEX v, INT numVert, INT maxHops) FOR GRAPH social RETURNS(FLOAT) {
 
   SumAccum<int> @@currDist, @@totalDist;
   OrAccum<bool> @visited;
 
   # Initialize: Set the input vertex s as the starting point
   Start = {v};
   Start = SELECT s FROM Start:s
           ACCUM s.@visited += true;
 
   # totalDist = sum (distance between vertex s and all connected neighbors)
   WHILE (Start.size() > 0) LIMIT maxHops DO    # explore up to (maxHops) hops from s
     @@currDist += 1;
     # Move from the current start set to the neighboring set of (unvisited) vertices
     Start = SELECT t FROM Start:s -((Friend|Also_Friend):e)-> :t
             WHERE t.@visited == false AND t != s
             POST-ACCUM
                 t.@visited += true;
     @@totalDist += Start.size() * @@currDist;
   END;
 
   IF @@totalDist > 0 THEN
     RETURN ((numVert - 1) * 1.0) / (@@totalDist * 1.0);
   ELSE
     RETURN (-1.0);
   END;
 }

# Main Query
CREATE QUERY closeness_cent (BOOL display, INT outputLimit) FOR GRAPH social {
 TYPEDEF TUPLE<STRING name, FLOAT score> vertexScore;
  HeapAccum<vertexScore>(outputLimit, score DESC) @@topScores;
  SumAccum<float> @score;
  SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed
  
  INT numVert;
  INT maxHops = 10;      # measure distance for vertices up to 10 hops away
  
  Start = {Person.*};

  #Total number of vertices considered in graph
  numVert = Start.size();

  # get closeness centrality for each vertex
  Start = SELECT s FROM Start:s
              POST-ACCUM s.@score = cc_subquery(s,numVert,maxHops),
              @@topScores += vertexScore(s.name, cc_subquery(s,numVert,maxHops));

      PRINT @@topScores;
   IF display THEN
      PRINT Start[Start.@score];
      Start = SELECT s
          FROM Start:s -((Friend|Also_Friend):e)-> :t
          ACCUM @@edgeSet += e;
      PRINT @@edgeSet;
   END;
}

#INSTALL QUERY cc_subquery, closeness_cent
