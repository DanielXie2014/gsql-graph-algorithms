CREATE QUERY cosine_nbor_ap_sub (VERTEX source) FOR GRAPH movie RETURNS (MapAccum<VERTEX, FLOAT>){
/* This subquery calculates the Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
*/

        MapAccum<VERTEX, FLOAT> @@result;
        SumAccum<FLOAT> @numerator, @@norm1, @norm2;

        start1 = {source};
        subjects = SELECT t
                   FROM start1:s -(Likes:e)-> :t
                   ACCUM t.@numerator = e.weight,
                         @@norm1 += pow(e.weight, 2);

        neighbours = SELECT t
                     FROM subjects:s -(reverse_Likes:e)-> Person:t
                     WHERE t != source and getvid(source) < getvid(t)
                     ACCUM t.@numerator += s.@numerator * e.weight;

        neighbours = SELECT s
                     FROM neighbours:s -(Likes:e)-> :t
                     ACCUM s.@norm2 += pow(e.weight, 2)
                     POST-ACCUM @@result += (s -> s.@numerator/sqrt(@@norm1 * s.@norm2))
                 ;

        RETURN @@result;
}


CREATE QUERY cosine_nbor_ap (INT topK) FOR GRAPH movie{
/* This query calls the subquery cosine_nbor_ap_sub to get the similarity score of every pair of vertices.
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute.
   A similarity edge with one FLOAT attribute in the schema is required for this version.
*/
        TYPEDEF tuple<VERTEX vertex1, VERTEX vertex2, FLOAT score> SIMILARITY_SCORE;
        MapAccum<VERTEX, FLOAT> @single_result;
        HeapAccum<SIMILARITY_SCORE>(topK, score DESC) @@total_result;

        start = {Person.*}; 
        start = SELECT s
                FROM start:s
                ACCUM s.@single_result = cosine_nbor_ap_sub (s)
                POST-ACCUM 
                        FOREACH (key, value) IN s.@single_result DO
                                @@total_result += SIMILARITY_SCORE(s, key, value)
                        END
            ;
        
        PRINT @@total_result;

}

#install query cosine_nbor_ap_sub
#install query cosine_nbor_ap 
