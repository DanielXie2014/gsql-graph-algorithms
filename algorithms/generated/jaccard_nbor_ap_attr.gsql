  CREATE QUERY jaccard_nbor_ap_sub_attr (vertex<Person> source, INT topK) FOR GRAPH movie {
/* This subquery calculates the Jaccard Similarity between a given vertex and every other vertex.
Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
*/
    
        SumAccum<int> @intersection_size, @@set_size_A, @set_size_B;
        SumAccum<FLOAT> @jaccard;

        Start (ANY) = {source};
        Start = SELECT s
                FROM Start:s
                ACCUM @@set_size_A += s.outdegree("Likes");

        Subjects = SELECT t
                   FROM Start:s-(Likes:e)-:t;

        Others = SELECT t
                 FROM Subjects:s -(reverse_Likes:e)- :t
                 WHERE t != source and getvid(source) < getvid(t)
                 ACCUM t.@intersection_size += 1, 
                       t.@set_size_B = t.outdegree("Likes")
                 POST-ACCUM t.@jaccard = t.@intersection_size*1.0/(@@set_size_A + t.@set_size_B - t.@intersection_size)
                 ORDER BY t.@jaccard DESC
                 LIMIT topK
                 ;
        Others = SELECT s
                 FROM Others:s
                 POST-ACCUM insert into similarity values(source, s, s.@jaccard);

}

CREATE QUERY jaccard_nbor_ap_attr () FOR GRAPH movie {
/* This query calls the subquery jaccard_nbor_ap_sub_attr to get the similarity score of every pair of vertices.
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute. 
   A similarity edge with one float attribute in the schema is required for this version.  
*/


        start = {Person.*};
        start = SELECT s
                FROM start:s
                ACCUM jaccard_nbor_ap_sub_attr (s, topK)
                ;


}

