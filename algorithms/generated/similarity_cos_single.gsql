CREATE QUERY similarity_cos_single (vertex input, int topk) FOR GRAPH movie {

/* This query calculates the Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute.
   A similarity edge with one float attribute in the schema is required for this version.
*/

        TYPEDEF tuple<vertex vertex1, vertex vertex2, float score> SIMILARITY_SCORE;

        HeapAccum<SIMILARITY_SCORE>(topk, score DESC) @@result_topk;    
        SumAccum<float> @numerator, @@norm1, @norm2;

        start1 = {input};
        subjects = SELECT t
                   FROM start1:s -(Likes:e)-> :t
                   ACCUM t.@numerator = e.weight,
                         @@norm1 += pow(e.weight, 2);

        neighbours = SELECT t
                     FROM subjects:s -(reverse_Likes:e)-> Person:t
                     WHERE t != input
                     ACCUM t.@numerator += s.@numerator * e.weight;

        neighbours = SELECT s
                     FROM neighbours:s -(Likes:e)-> :t
                     ACCUM s.@norm2 += pow(e.weight, 2)
              	     POST-ACCUM @@result_topk += SIMILARITY_SCORE(input, s, s.@numerator/sqrt(@@norm1 * s.@norm2))                                 ;
        PRINT @@result_topk;


}

#install query similarity_cos_single

