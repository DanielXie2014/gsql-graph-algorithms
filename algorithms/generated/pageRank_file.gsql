#Compute the pageRank score for each vertex in the graph, with the parameters:

CREATE QUERY pageRank_file (FLOAT maxChange, INT maxIter, FLOAT damping, BOOL display, FILE f) FOR GRAPH social
{
  # In each iteration, compute a score for each vertex:
  #   score = (1-damping) + damping*sum(received scores from its neighbors).
  # The pageRank algorithm stops when either of the following is true:
  #  a) it reaches maxIter iterations;
  #  b) the max score change for any vertex compared to the last iteration <= maxChange.

  MaxAccum<float> @@maxDiff = 9999; # max score change in an iteration
  SumAccum<float> @received_score = 0; # sum of scores each vertex receives from neighbors
  SumAccum<float> @score = 1;   # initial score for every vertex is 1.
  SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed

  INT iterNum = 0;

  Start = {Person.*};   #  Start with all vertices of specified type(s)
  WHILE @@maxDiff > maxChange LIMIT maxIter DO
    @@maxDiff = 0;
    V = SELECT s
         FROM Start:s -(Friend:e)-> :t
         ACCUM t.@received_score += s.@score/(s.outdegree("Friend")) 
         POST-ACCUM s.@score = (1.0-damping) + damping * s.@received_score,
                    s.@received_score = 0,
                    @@maxDiff += abs(s.@score - s.@score');
    iterNum = iterNum + 1;
  END; # end while loop



  f.println("Vertex_ID", "PageRank");
  V = SELECT s FROM Start:s
	       POST-ACCUM f.println(s, s.@score);

  IF display THEN
     PRINT Start[Start.@score];
     Start = SELECT s
         FROM Start:s -(Friend:e)-> :t
         ACCUM @@edgeSet += e;
     PRINT @@edgeSet;
  END;
}

#INSTALL QUERY pageRank_file
