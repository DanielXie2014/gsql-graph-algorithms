CREATE QUERY knn_cosine_ss (VERTEX source, INT topK) FOR GRAPH movie RETURNS (STRING) {
/* This subquery is k-nearest neighbors based on Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
*/
        SumAccum<FLOAT> @numerator, @@norm1, @norm2, @similarity;
        MapAccum<STRING, INT> @@count;
        INT maxCount = 0;
        STRING chosenLabel;

        # calculate similarity and find the top k nearest neighbors
        Start = {source};
        Subjects = SELECT t
                   FROM Start:s -(Likes:e)-> :t
                   ACCUM t.@numerator = e.weight,
                         @@norm1 += pow(e.weight, 2);

        Neighbours = SELECT t
                     FROM Subjects:s -(Reverse_Likes:e)-> Person:t
                     WHERE t != source AND t.known_label != ""    # only consider the ones with known label
                     ACCUM t.@numerator += s.@numerator * e.weight;

        kNN = SELECT s
              FROM Neighbours:s -(Likes:e)-> :t
              ACCUM s.@norm2 += pow(e.weight, 2)
              POST-ACCUM s.@similarity = s.@numerator/sqrt(@@norm1 * s.@norm2)
              ORDER BY s.@similarity DESC
              LIMIT topK;

        #predict label
        kNN = SELECT s
              FROM kNN:s
              ACCUM @@count += (s.known_label -> 1);

        FOREACH (label, cnt) IN @@count DO
            IF cnt > maxCount THEN
                maxCount = cnt;
                chosenLabel = label;
            END;
        END;

        PRINT chosenLabel;
        RETURN chosenLabel;

}

CREATE QUERY knn_cosine_all (INT topK) FOR GRAPH movie {
/* This query is k-nearest neighbors based on Cosine Similarity on all vertices.
   The output is the predicted label for all the vertices depending on the majority label of their k-nearest neighbors.
*/
        SumAccum<STRING> @predicted_label;
        
        Source = {Person.*};        
        Source = SELECT s
                 FROM Source:s 
                 WHERE s.known_label == ""
                 ACCUM s.@predicted_label = knn_cosine_ss(s, topK);    
        PRINT Source;
  
}
