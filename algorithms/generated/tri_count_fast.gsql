# Compute the total number of triangles in the graph. No input parameters are needed.
# Use an algorithm which is fast but use additional memory for temporary storage

CREATE QUERY tri_count_fast() FOR GRAPH social {
 
  SumAccum<int> @@cnt;
  SetAccum<int> @neighbors;
  
  Start = {Person.*};
  
  # We build up our neighbor lists manually because we'll only build them up on the 2 smaller vertices on a triangle. 
  T0 = SELECT t
    FROM Start:s-(Coworker)-> :t
    WHERE (s.outdegree("Coworker")) > (t.outdegree("Coworker")) OR ((s.outdegree("Coworker")) == (t.outdegree("Coworker")) AND getvid(s) > getvid(t))
    ACCUM t.@neighbors += getvid(s);
  
  # Here we compute the intersection for 2 points on the triangle.
  T1 = SELECT t
       FROM Start:s-(Coworker:e)-> :t
       ACCUM @@cnt += COUNT(s.@neighbors INTERSECT t.@neighbors);
  
  # Divide by 2 because every triangle was counted twice
  PRINT @@cnt/2 AS num_triangles;
}
 
#INSTALL QUERY tri_count_fast
