CREATE QUERY tri_count_fast() FOR GRAPH master {
# Compute the total number of triangles in the GRAPH. No input parameters are needed.
# Use an algorithm which is fast but use additional memory for temporary storage
        SumAccum<int> @@cnt;
        SetAccum<int> @neighbors;
  
        Start = {undirected_v.*};
  
# We build up our neighbor lists manually because we'll only build them up on the 2 smaller vertices on a triangle. 
        T0 = SELECT t
             FROM Start:s-((undirected_edge))-> :t
             WHERE (s.outdegree("undirected_edge")) > (t.outdegree("undirected_edge")) OR ((s.outdegree("undirected_edge")) == (t.outdegree("undirected_edge")) AND getvid(s) > getvid(t))
             ACCUM t.@neighbors += getvid(s);
  
# Here we compute the intersection for 2 points on the triangle.
        T1 = SELECT t
             FROM Start:s-((undirected_edge):e)-> :t
             ACCUM @@cnt += COUNT(s.@neighbors INTERSECT t.@neighbors);
  
# Divide by 2 because every triangle was counted twice
        PRINT @@cnt/2 AS num_triangles;
}
 
#INSTALL QUERY tri_count_fast
