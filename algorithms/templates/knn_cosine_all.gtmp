*SUB* CREATE QUERY knn_cosine_ss*EXT*(VERTEX source, INT topK) FOR GRAPH *graph* RETURNS (STRING) {
/* This subquery is k-nearest neighbors based on Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
*/
        SumAccum<FLOAT> @numerator, @@norm1, @norm2, @similarity;
        MapAccum<STRING, INT> @@count;
        INT max_count = 0;
        STRING predicted_label;

        # calculate similarity and find the top k nearest neighbors
        start = {source};
        subjects = SELECT t
                   FROM start:s -(*edge-types*:e)-> :t
                   ACCUM t.@numerator = e.*edge-weight*,
                         @@norm1 += pow(e.*edge-weight*, 2);

        neighbours = SELECT t
                     FROM subjects:s -(*sec-edge-types*:e)-> *vertex-types*:t
                     WHERE t != source AND t.*vertex-label* != ""    # only consider the ones with known label
                     ACCUM t.@numerator += s.@numerator * e.*edge-weight*;

        kNN = SELECT s
              FROM neighbours:s -(*edge-types*:e)-> :t
              ACCUM s.@norm2 += pow(e.*edge-weight*, 2)
              POST-ACCUM s.@similarity = s.@numerator/sqrt(@@norm1 * s.@norm2)
              ORDER BY s.@similarity DESC
              LIMIT topK;

        #predict label
        kNN = SELECT s
              FROM kNN:s
              ACCUM @@count += (s.*vertex-label* -> 1);

        FOREACH (label, cnt) IN @@count DO
            IF cnt > max_count THEN
                max_count = cnt;
                predicted_label = label;
            END;
        END;

        PRINT predicted_label;
        RETURN predicted_label;

}

*ATTR*CREATE QUERY knn_cosine_all*EXT* (INT topK) FOR GRAPH *graph* {
*ACCM*CREATE QUERY knn_cosine_all*EXT* (INT topK) FOR GRAPH *graph* {
*FILE*CREATE QUERY knn_cosine_all*EXT* (INT topK, FILE f) FOR GRAPH *graph* {
/* This query is k-nearest neighbors based on Cosine Similarity on all vertices.
   The output is the predicted label for all the vertices depending on the majority label of their k-nearest neighbors.
*/
        SumAccum<STRING> @predicted_label;
        
        source = {*vertex-types*);        
        source = SELECT s
                 FROM source:s 
                 WHERE s.*vertex-label* == ""
*ACCM*           ACCUM s.@predicted_label = knn_cosine_ss(s, topK);    
*ATTR*           POST-ACCUM s.*vStrAttr* = knn_cosine_ss(s, topK);
*FILE*           ACCUM s.@predicted_label = knn_cosine_ss(s, topK)
*FILE*           POST-ACCUM f.println(s, s.@predicted_label);
*ACCM*  PRINT source;
  
}
