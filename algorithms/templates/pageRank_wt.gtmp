*ATTR*CREATE QUERY pageRank_wt*EXT* (FLOAT maxChange, INT maxIter, FLOAT damping) FOR GRAPH *graph*{
*ACCM*CREATE QUERY pageRank_wt*EXT* (FLOAT maxChange, INT maxIter, FLOAT damping, BOOL display, INT outputLimit) FOR GRAPH *graph*{
*FILE*CREATE QUERY pageRank_wt*EXT* (FLOAT maxChange, INT maxIter, FLOAT damping, FILE f) FOR GRAPH *graph*{
# Compute the pageRank score for each vertex in the GRAPH, using weighted edge.
# In each iteration, compute a score for each vertex:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# The pageRank algorithm stops when either of the following is true:
#  a) it reaches maxIter iterations;
#  b) the max score change for any vertex compared to the last iteration <= maxChange.

*ACCM*  TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> vertexScore;
*ACCM*  HeapAccum<vertexScore>(outputLimit, score DESC) @@topScores;
        MaxAccum<FLOAT> @@maxDiff = 9999; # max score change in an iteration
        SumAccum<FLOAT> @received_score = 0; # sum of scores each vertex receives FROM neighbors
        SumAccum<FLOAT> @score = 1;   # Initial score for every vertex is 1.
*ACCM*  SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed
        SumAccum<FLOAT> @total_weight;

        Start = {*vertex-types*};   #  Start with all vertices of specified type(s)
        Start = SELECT s
                FROM Start:s -(Friend:e) -> :t
                ACCUM s.@total_weight += e.weight;  # Calculate the total weight for each vertex

        WHILE @@maxDiff > maxChange LIMIT maxIter DO
                @@maxDiff = 0;
                V = SELECT s
                    FROM Start:s -(*edge-types*:e)-> :t
                    ACCUM t.@received_score += s.@score * e.*edge-weight* / s.@total_weight
                    POST-ACCUM s.@score = (1.0-damping) + damping * s.@received_score,
                               s.@received_score = 0,
                               @@maxDiff += abs(s.@score - s.@score');
        END; 

*ATTR*  V = SELECT s FROM Start:s
*ATTR*      POST-ACCUM s.*vFltAttr* = s.@score;

*ACCM*  IF outputLimit > 0 THEN
*ACCM*          V = SELECT s FROM Start:s
*ACCM*              POST-ACCUM @@topScores += vertexScore(s, s.@score);
*ACCM*          PRINT @@topScores;
*ACCM*  END;

*FILE*  f.println("Vertex_ID", "PageRank");
*FILE*  V = SELECT s FROM Start:s
*FILE*      POST-ACCUM f.println(s, s.@score);

*ACCM*  IF display THEN
*ACCM*          PRINT Start[Start.@score];
*ACCM*          Start = SELECT s
*ACCM*                  FROM Start:s -(*edge-types*:e)-> :t
*ACCM*                  ACCUM @@edgeSet += e;
*ACCM*          PRINT @@edgeSet;
*ACCM*  END;
}

#INSTALL QUERY pageRank*EXT*
