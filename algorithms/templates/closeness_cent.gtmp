# Closeness Centrality

# Subquery returns closeness centrality for vertex v in graph with numVert vertices
*SUB* CREATE QUERY cc_subquery (VERTEX v, INT numVert, INT maxHops) FOR GRAPH *graph* RETURNS(FLOAT) {
*SUB* 
*SUB*   SumAccum<int> @@currDist, @@totalDist;
*SUB*   OrAccum<bool> @visited;
*SUB* 
*SUB*   # Initialize: Set the input vertex s as the starting point
*SUB*   Start = {v};
*SUB*   Start = SELECT s FROM Start:s
*SUB*           ACCUM s.@visited += true;
*SUB* 
*SUB*   # totalDist = sum (distance between vertex s and all connected neighbors)
*SUB*   WHILE (Start.size() > 0) LIMIT maxHops DO    # explore up to (maxHops) hops from s
*SUB*     @@currDist += 1;
*SUB*     # Move from the current start set to the neighboring set of (unvisited) vertices
*SUB*     Start = SELECT t FROM Start:s -(*edge-types*:e)-> :t
*SUB*             WHERE t.@visited == false AND t != s
*SUB*             POST-ACCUM
*SUB*                 t.@visited += true;
*SUB*     @@totalDist += Start.size() * @@currDist;
*SUB*   END;
*SUB* 
*SUB*   IF @@totalDist > 0 THEN
*SUB*     RETURN ((numVert - 1) * 1.0) / (@@totalDist * 1.0);
*SUB*   ELSE
*SUB*     RETURN (-1.0);
*SUB*   END;
*SUB* }

# Main Query
*ATTR*CREATE QUERY closeness_cent*EXT* (BOOL display) FOR GRAPH *graph* {
*ACCM*CREATE QUERY closeness_cent*EXT* (BOOL display, INT outputLimit) FOR GRAPH *graph* {
*FILE*CREATE QUERY closeness_cent*EXT* (BOOL display, FILE f) FOR GRAPH *graph* {
*ACCM* TYPEDEF TUPLE<STRING name, FLOAT score> vertexScore;
*ACCM*  HeapAccum<vertexScore>(outputLimit, score DESC) @@topScores;
  SumAccum<float> @score;
  SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed
  
  INT numVert;
  INT maxHops = 10;      # measure distance for vertices up to 10 hops away
  
  Start = {*vertex-types*};

  #Total number of vertices considered in graph
  numVert = Start.size();

  # get closeness centrality for each vertex
*FILE*  f.println("Vertex_ID", "Closeness");
  Start = SELECT s FROM Start:s
              POST-ACCUM s.@score = cc_subquery(s,numVert,maxHops),
*ATTR*              s.*vFltAttr* = cc_subquery(s,numVert,maxHops);
*ACCM*              @@topScores += vertexScore(s.name, cc_subquery(s,numVert,maxHops));
*FILE*              f.println(s, cc_subquery(s,numVert,maxHops));

*ACCM*      PRINT @@topScores;
   IF display THEN
      PRINT Start[Start.@score];
      Start = SELECT s
          FROM Start:s -(*edge-types*:e)-> :t
          ACCUM @@edgeSet += e;
      PRINT @@edgeSet;
   END;
}

#INSTALL QUERY cc_subquery, closeness_cent*EXT*
