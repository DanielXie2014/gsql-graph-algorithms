# BFS for Single-Source Shortest Path without weights on edges

*ATTR*CREATE QUERY shortest_ss_no_wt*EXT* (VERTEX v, BOOL display, BOOL path) FOR GRAPH *graph* {
*ACCM*CREATE QUERY shortest_ss_no_wt*EXT* (VERTEX v, BOOL display, BOOL path) FOR GRAPH *graph* {
*FILE*CREATE QUERY shortest_ss_no_wt*EXT* (VERTEX v, BOOL display, BOOL path, STRING filepath) FOR GRAPH *graph* {

*FILE*FILE f(filepath);

	MinAccum<int> @dis;
        OrAccum @visited;
        ListAccum<vertex> @path;
	SetAccum<edge> @@edgeSet;

        VSET = {*vertex-types*};
        Source = {v};
        Source = SELECT s FROM Source:s
                 ACCUM s.@visited += true, 
		       s.@dis = 0,
		       s.@path = s;  //initialize

        while(Source.size()>0) do
          Source = SELECT t
                   FROM Source:s -(*edge-types*:e)-> :t
                   WHERE t.@visited == false
                   ACCUM t.@dis += s.@dis + 1,
			 t.@path = s.@path + [t],
                         t.@visited += true;
        end;

	VSET = SELECT s FROM VSET:s
               WHERE s.@visited == true;

  ##### Print the results #####

*ATTR*VSET = SELECT s
*ATTR*         FROM VSET:s
*ATTR*         POST-ACCUM s.*vFltAttr* = s.@dis;


*ACCM* PRINT VSET[VSET.@dis, VSET.@path];
  IF display THEN
*ATTR*     PRINT VSET[VSET.@dis, VSET.@path];
*FILE*     PRINT VSET[VSET.@dis, VSET.@path];
     VSET = SELECT s
          FROM VSET:s -(*edge-types*:e)-> :t
         ACCUM @@edgeSet += e;
     PRINT @@edgeSet;
  END;

*FILE*   f.println("Vertex_ID","Distance","Shortest_Path");
*FILE*   VSET = SELECT s FROM VSET:s
*FILE*           POST-ACCUM f.println(s, s.@dis, s.@path);

}
