*ATTR*CREATE QUERY pageRank*EXT* (FLOAT max_change = 0.001, INT iter = 50, FLOAT damping = 0.85, INT split=1) FOR GRAPH *graph*{
*ACCM*CREATE QUERY pageRank*EXT* (FLOAT max_change = 0.001, INT iter = 50, FLOAT damping = 0.85, BOOL display = FALSE, INT output_limit = 100, INT split=1) FOR GRAPH *graph*{
*FILE*CREATE QUERY pageRank*EXT* (FILE f, FLOAT max_change = 0.001, INT iter = 50, FLOAT damping = 0.85, INT split=1) FOR GRAPH *graph*{
# Compute the pageRank score for each vertex in the GRAPH
# In each iteration, compute a score for each vertex:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# The pageRank algorithm stops when either of the following is true:
#  a) it reaches max_iter iterations;
#  b) the max score change for any vertex compared to the last iteration <= max_change.

*ACCM*  TYPEDEF TUPLE<vertex Vertex_ID, FLOAT score> vertex_score;
*ACCM*  HeapAccum<vertex_score>(output_limit, score DESC) @@top_scores;
        MaxAccum<float> @@max_diff = 9999; # max score change in an iteration
        SumAccum<float> @received_score = 0; # sum of scores each vertex receives FROM neighbors
        SumAccum<float> @score = 1;   # Initial score for every vertex is 1.
*ACCM*  SetAccum<EDGE> @@edge_set;                   # list of all edges, if display is needed

        all = {*vertex-types*};   #  all with all vertices of specified type(s)
        WHILE @@max_diff > max_change LIMIT iter DO
                @@max_diff = 0;
                FOREACH i IN RANGE[0, split-1] DO 
                        subset = SELECT s
                                 FROM all:s
                                 WHERE getvid(s) % split == i;
                        tmp = SELECT s
                              FROM subset:s -(*edge-types*:e)-> :t
                              ACCUM t.@received_score += s.@score/(s.outdegree("Friend")); 
                END;
        all = SELECT s
              FROM all:s
              POST-ACCUM s.@score = (1.0-damping) + damping * s.@received_score,
                         s.@received_score = 0,
                         @@max_diff += abs(s.@score - s.@score');
        END;

*ATTR*  V = SELECT s FROM all:s
*ATTR*      POST-ACCUM s.*vFltAttr* = s.@score;

*ACCM*  IF output_limit > 0 THEN
*ACCM*          V = SELECT s FROM all:s
*ACCM*              POST-ACCUM @@top_scores += vertex_score(s, s.@score);
*ACCM*          PRINT @@top_scores;
*ACCM*  END;

*FILE*  f.println("Vertex_ID", "PageRank");
*FILE*  V = SELECT s FROM all:s
*FILE*      POST-ACCUM f.println(s, s.@score);

*ACCM*  IF display THEN
*ACCM*          PRINT all[all.@score];
*ACCM*          all = SELECT s
*ACCM*                  FROM all:s -(*edge-types*:e)-> :t
*ACCM*                  ACCUM @@edge_set += e;
*ACCM*          PRINT @@edge_set;
*ACCM*  END;
}

#INSTALL QUERY pageRank*EXT*
