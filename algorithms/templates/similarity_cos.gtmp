
#ccard subquery
*ATTR**SUB* CREATE QUERY similarity_cos_sub*EXT* (vertex<*vertex-types*> input) FOR GRAPH *graph* {
*ACCM**SUB* CREATE QUERY similarity_cos_sub*EXT* (vertex input) FOR GRAPH *graph* returns (MapAccum<vertex, float>){
*FILE**SUB* CREATE QUERY similarity_cos_sub*EXT* (vertex input) FOR GRAPH *graph* returns (MapAccum<vertex, float>){

*ACCM*  MapAccum<vertex, float> @@result;
*FILE*  MapAccum<vertex, float> @@result;
        SumAccum<float> @numerator, @@norm1, @norm2;

        start1 = {input};
        subjects = select t
                   from start1:s -(*edge-types*:e)-> :t
                   accum t.@numerator = e.*edge-weight*,
                         @@norm1 += pow(e.*edge-weight*, 2);

        neighbours = select t
                     from subjects:s -(*rev-edge-types*:e)-> *vertex-types*:t
		     where t != input and getvid(input) < getvid(t)
                     accum t.@numerator += s.@numerator * e.*edge-weight*;

        neighbours = select s
                     from neighbours:s -(*edge-types*:e)-> :t
                     accum s.@norm2 += pow(e.*edge-weight*, 2)
*ATTR*               post-accum insert into *insert-edge-name* values (input, s, s.@numerator/sqrt(@@norm1 * s.@norm2))
*ACCM*               post-accum @@result += (s -> s.@numerator/sqrt(@@norm1 * s.@norm2))
*FILE*               post-accum @@result += (s -> s.@numerator/sqrt(@@norm1 * s.@norm2))
                 ;

*ACCM*  return @@result;
*FILE*  return @@result;
}

# main query
*ATTR*CREATE QUERY similarity_cos*EXT* () FOR GRAPH *graph* { 
*ACCM*CREATE QUERY similarity_cos*EXT* (int topk) FOR GRAPH *graph*{
*FILE*CREATE QUERY similarity_cos*EXT* (int topk, STRING filepath) FOR GRAPH *graph*{

*ACCM*TYPEDEF tuple<vertex vertex1, vertex vertex2, float score> SIMILARITY_SCORE;
*FILE*TYPEDEF tuple<vertex vertex1, vertex vertex2, float score> SIMILARITY_SCORE;
*FILE*FILE f(filepath);
*ACCM*MapAccum<vertex, float> @single_result;
*FILE*MapAccum<vertex, float> @single_result;
*ACCM*HeapAccum<SIMILARITY_SCORE>(topk, score DESC) @@total_result;
*FILE*HeapAccum<SIMILARITY_SCORE>(topk, score DESC) @@total_result;

	start = {*vertex-types*.*}; 
	start = select s
	        from start:s
*ATTR*          accum similarity_cos_sub*EXT* (s)
*ACCM*		accum s.@single_result = similarity_cos_sub*EXT* (s)
*FILE*          accum s.@single_result = similarity_cos_sub*EXT* (s)
*ACCM*		post-accum 
*ACCM*			foreach (key, value) in s.@single_result do
*ACCM*				@@total_result += SIMILARITY_SCORE(s, key, value)
*ACCM*			end
*FILE*          post-accum
*FILE*                  foreach (key, value) in s.@single_result do
*FILE*                          @@total_result += SIMILARITY_SCORE(s, key, value)
*FILE*                  end
		;
	
*ACCM*	print @@total_result;
*FILE*	f.println("Vertex1","Vertex2","Similarity");
*FILE*  foreach item in @@total_result do
*FILE*          f.println(item.vertex1, item.vertex2, item.score);
*FILE*  end;

}

#install query similarity_cos_sub*EXT*
#install query similarity_cos*EXT* 
