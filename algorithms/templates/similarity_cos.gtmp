*ATTR**SUB* CREATE QUERY similarity_cos_sub*EXT* (vertex<*vertex-types*> input) FOR GRAPH *graph* {
*ACCM**SUB* CREATE QUERY similarity_cos_sub*EXT* (vertex input) FOR GRAPH *graph* RETURNS (MapAccum<vertex, float>){
*FILE**SUB* CREATE QUERY similarity_cos_sub*EXT* (vertex input) FOR GRAPH *graph* RETURNS (MapAccum<vertex, float>){
/* This subquery calculates the Cosine Similarity between a given vertex and every other vertex.
Cosine similarity = A \dot B / ||A|| \dot ||B||
*/

*ACCM*  MapAccum<vertex, float> @@result;
*FILE*  MapAccum<vertex, float> @@result;
        SumAccum<float> @numerator, @@norm1, @norm2;

        start1 = {input};
        subjects = SELECT t
                   FROM start1:s -(*edge-types*:e)-> :t
                   ACCUM t.@numerator = e.*edge-weight*,
                         @@norm1 += pow(e.*edge-weight*, 2);

        neighbours = SELECT t
                     FROM subjects:s -(*sec-edge-types*:e)-> *vertex-types*:t
        	     WHERE t != input and getvid(input) < getvid(t)
                     ACCUM t.@numerator += s.@numerator * e.*edge-weight*;

        neighbours = SELECT s
                     FROM neighbours:s -(*edge-types*:e)-> :t
                     ACCUM s.@norm2 += pow(e.*edge-weight*, 2)
*ATTR*               POST-ACCUM insert into *insert-edge-name* values (input, s, s.@numerator/sqrt(@@norm1 * s.@norm2))
*ACCM*               POST-ACCUM @@result += (s -> s.@numerator/sqrt(@@norm1 * s.@norm2))
*FILE*               POST-ACCUM @@result += (s -> s.@numerator/sqrt(@@norm1 * s.@norm2))
                 ;

*ACCM*  RETURN @@result;
*FILE*  RETURN @@result;
}


*ATTR*CREATE QUERY similarity_cos*EXT* () FOR GRAPH *graph* { 
*ACCM*CREATE QUERY similarity_cos*EXT* (int topk) FOR GRAPH *graph*{
*FILE*CREATE QUERY similarity_cos*EXT* (int topk, STRING filepath) FOR GRAPH *graph*{
/* This query calls the subquery similarity_cos_sub*EXT* to get the similarity score of every pair of vertices.
1. The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
2. The Attribute version insert edges between the pairs, with the score as an edge attribute.
   A similarity edge with one float attribute in the schema is required for this version.
*/
*ACCM*  TYPEDEF tuple<vertex vertex1, vertex vertex2, float score> SIMILARITY_SCORE;
*FILE*  TYPEDEF tuple<vertex vertex1, vertex vertex2, float score> SIMILARITY_SCORE;
*FILE*  FILE f(filepath);
*ACCM*  MapAccum<vertex, float> @single_result;
*FILE*  MapAccum<vertex, float> @single_result;
*ACCM*  HeapAccum<SIMILARITY_SCORE>(topk, score DESC) @@total_result;
*FILE*  HeapAccum<SIMILARITY_SCORE>(topk, score DESC) @@total_result;

        start = {*vertex-types*.*}; 
        start = SELECT s
                FROM start:s
*ATTR*          ACCUM similarity_cos_sub*EXT* (s)
*ACCM*        	ACCUM s.@single_result = similarity_cos_sub*EXT* (s)
*FILE*          ACCUM s.@single_result = similarity_cos_sub*EXT* (s)
*ACCM*        	POST-ACCUM 
*ACCM*        		FOREACH (key, value) IN s.@single_result DO
*ACCM*        			@@total_result += SIMILARITY_SCORE(s, key, value)
*ACCM*        		END
*FILE*          POST-ACCUM
*FILE*                  FOREACH (key, value) IN s.@single_result DO
*FILE*                          @@total_result += SIMILARITY_SCORE(s, key, value)
*FILE*                  END
        	;
        
*ACCM*  PRINT @@total_result;
*FILE*  f.println("Vertex1","Vertex2","Similarity");
*FILE*  FOREACH item IN @@total_result DO
*FILE*          f.println(item.vertex1, item.vertex2, item.score);
*FILE*  END;

}

#install query similarity_cos_sub*EXT*
#install query similarity_cos*EXT* 
