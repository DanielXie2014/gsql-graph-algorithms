
CREATE QUERY cycle_detection(INT depth) FOR GRAPH Karate RETURNS (MapAccum<VERTEX,STRING>){ 
/* Rochaâ€“Thatte cycle detection algorithm
This is a distributed algorithm for detecting all the cycles on large-scale directed graphs.In every iteration, the vertices send its sequences to its out-neighbors, and receive the sequences from the in-neighbors.
Stop passing the sequence (v1,v2,v3, ...) when:
1. v = v1. If v has the minimum label in the sequence, report the cycle
2. v = vi (i!=1). Do not report since this cycle is already reported in an earlier iteration
*/
        ListAccum<ListAccum<VERTEX>> @currList, @newList;
        ListAccum<ListAccum<VERTEX>> @@cycles;
        SumAccum<INT> @uid;
        SumAccum <INT> @cycle_count;
	      MapAccum<VERTEX,STRING> @@map;
  
        # initialization
        Active = {User.*};
        Active = SELECT s 
                 FROM Active:s
                 ACCUM s.@currList = [s];
  
        WHILE Active.size() > 0 LIMIT depth DO 
        Active = SELECT t 
                 FROM Active:s -(Friendship:e)- :t
                 ACCUM BOOL t_is_min = TRUE,
                       FOREACH sequence IN s.@currList DO 
                               IF t == sequence.get(0) THEN  # cycle detected
                                        FOREACH v IN sequence DO
                                                IF getvid(v) < getvid(t) THEN
                                                        t_is_min = FALSE,
                                                        BREAK
                                                END
                                        END,
                                        IF t_is_min == TRUE THEN  # if it has the minimal label in the list, report 
                                                FOREACH v IN sequence DO
	                                                  v.@cycle_count +=1
	                                              END
                                        END
                               ELSE IF sequence.contains(t) == FALSE THEN   # discard the sequences contain t
                                        t.@newList += [sequence + [t]]   # store sequences in @newList to avoid confliction with @currList
                               END
                       END
                 POST-ACCUM s.@currList.clear(),
                            t.@currList = t.@newList,
                            t.@newList.clear()
                 HAVING t.@currList.size() > 0;  # IF receive no sequences, deactivate it;
        END;
	      Active = SELECT s
	                FROM Active:s
	                ACCUM @@map+=(s->to_string(s.@cycle_count));
        return @@map;
	
}
